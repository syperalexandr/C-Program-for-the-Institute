#include "receiver.h"
#include <QtWidgets>
#include <QtNetwork>

Receiver::Receiver(QLineEdit *lineEditName, QTextEdit *textEditMessages, QListWidget *listWidgetUsers, QComboBox *comboBoxReceiver)
{
    this->lineEditName = lineEditName;
    this->textEditMessages = textEditMessages;
    this->listWidgetUsers = listWidgetUsers;
    this->comboBoxReceiver = comboBoxReceiver;

    udpSocket = new QUdpSocket(this);
    udpSocket->bind(14000, QUdpSocket::ShareAddress);

    timer = new QTimer(this);
    timer->setInterval(1000);
    timer->start();

    connect(udpSocket, &QUdpSocket::readyRead,
            this, &Receiver::processPendingDatagrams);
    connect(timer, &QTimer::timeout, this, &Receiver::checkAlive);
    //Создаем udpSocket, биндим на указанный порт, соединяем с классом readyRead
}

void Receiver::processPendingDatagrams()
{
    QByteArray datagram;
    QHostAddress senderIP = QHostAddress();
    quint16 port = 0;
    while (udpSocket->hasPendingDatagrams())
    //если хотя бы одна датаграмма ожидает чтения
    {
        datagram.resize(int(udpSocket->pendingDatagramSize()));
        udpSocket->readDatagram(datagram.data(), datagram.size(), &senderIP, &port);
        //textEditMessages->append("asdasdasd");
        QString data = datagram.constData();
        //QString name = data.split("<~>")[0];
        //QString message = data.split("<~>")[1];
        //textEditMessages->append(tr("%1 : %2").arg(name, message));
        if (data.split("_")[0] == P_TYPE)
        {
            if (data.split("_")[1] == P_CONNECT)
            {
                if (data.split("_")[2].toInt() == data.split("_")[3].toUtf8().size())
                {
                    //usersList.append(data.split("_")[3]);
                    userList.insert(senderIP, data.split("_")[3]);
                    timerList.insert(senderIP, 0);
                    //textEditMessages->append(tr("%1 присоединился").arg(data.split("_")[3]));
                    addMessage(tr("%1 присоединился").arg(data.split("_")[3]), true);
                    refreshListWidget();
                    refreshComboBox();
                    // Берём только имя присооденившегося, делаем это через split всего лишнего в пакете
                }
            }
            else if (data.split("_")[1] == P_SENDMESSAGE)
            {
                if (data.split("_")[2].toInt() == data.split("_")[3].toUtf8().size())
                {
                    //textEditMessages->append(tr("%1 : %2").arg(userList.value(senderIP.toString().split("::ffff:")[1]), data.split("_")[3]));
                    addMessage(tr("%1 : %2").arg(userList.value(senderIP), data.split("_")[3]), false);
                    // Берёи из сообщения имя присооденившегося и само сообщения, делаем это через split всего лишнего в пакете и выводим через :
                }
                
            }
            else if (data.split("_")[1] == P_PRIVATEMSG)
            {
                if (data.split("_")[2].toInt() == data.split("_")[3].toUtf8().size())
                {
                    addMessage(tr("Приватное сообщение от %1: %2").arg(userList.value(senderIP), data.split("_")[3]), false);
                }
            }
            else if (data.split("_")[1] == P_ALIVE)
            {
                if (data.split("_")[2].toInt() == data.split("_")[3].toUtf8().size())
                {
                    if (userList.contains(senderIP))
                    {
                        if (timerList.contains(senderIP)) {
                            timerList.insert(senderIP, 0);
                        }
                    }
                    else
                    {
                        userList.insert(senderIP, data.split("_")[3]);
                        timerList.insert(senderIP, 0);
                        addMessage(tr("%1 в чате").arg(data.split("_")[3]), true);
                        refreshListWidget();
                        refreshComboBox();
                    }
                }
            }
        }
        //textEditMessages->append(data);
    }
}

void Receiver::refreshListWidget()
{
    listWidgetUsers->clear();
    foreach (QString item, userList)
    {
        listWidgetUsers->addItem(item);
    }
}

void Receiver::refreshComboBox()
{
    comboBoxReceiver->clear();
    comboBoxReceiver->addItem(QString::fromUtf8("Все"));
    foreach (QString item, userList)
    {
        if (item != lineEditName->text()) {
            comboBoxReceiver->addItem(item);
        }
    }
}

void Receiver::checkAlive()
{
    foreach (int time, timerList.values())
    {
        if (time > 19)
        {
            QHostAddress key = timerList.key(time);
            //qDebug()<<timerList.value(timerList.key(time));
            addMessage(tr("%1 покинул чат").arg(userList.value(key)), true);
            //textEditMessages->append(tr("%1 покинул нас").arg(userList.value(timeList.key(time))));
            timerList.remove(key);
            userList.remove(key);
            refreshListWidget();
            refreshComboBox();
        }
        else
        {
            int newTime = time + 1;
            timerList.insert(timerList.key(time), newTime);
            //timerList[timerList.key(time)] = newTime;
        }
    }
}

void Receiver::addMessage(QString text, bool isChatMessage)
{
    if (isChatMessage == true)
    {
        textEditMessages->setTextColor(QColor(Qt::gray));
        textEditMessages->append(text);
    }
    else
    {
        textEditMessages->setTextColor(QColor(Qt::black));
        textEditMessages->append(text);
    }
}
